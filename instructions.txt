Prompt for Developing the Real Time Forum Project
You are tasked with creating a Real Time Forum web application based on the provided HTML structure and project requirements. The application must be a single-page application (SPA) with one HTML file, using JavaScript for frontend logic, Golang for backend logic and WebSockets, SQLite for data storage, and CSS for styling. Below are the detailed requirements and guidelines to complete the project.
Project Overview
The Real Time Forum is a web application where users can register, log in, create posts, comment on posts, and send private messages in real time. The application must handle all page changes dynamically using JavaScript without reloading the page. Real-time interactions (e.g., private messages, online status) must be implemented using WebSockets. The provided HTML structure outlines the frontend interface, which you should use as the basis for the SPA.
Requirements
Technologies

Backend:
Golang: Handle HTTP requests, WebSocket connections, and database interactions.
SQLite: Store user data, posts, comments, and private messages.
Allowed Packages:
All standard Go packages.
gorilla/websocket for WebSocket functionality.
sqlite3 for database operations.
bcrypt for password hashing.
gofrs/uuid or google/uuid for generating unique IDs.




Frontend:
HTML: Use the provided index.html as the single HTML file.
JavaScript: Handle all frontend events, DOM manipulation, and WebSocket communication. No frontend libraries or frameworks (e.g., React, Angular, Vue) are allowed.
CSS: Style the application to ensure a clean, user-friendly interface.


Single-Page Application: All page transitions (e.g., login, register, posts, messages) must be handled dynamically using JavaScript without page reloads.

Features
1. Registration and Login

Registration:
Users must fill out a registration form with:
Nickname (unique)
Age
Gender (options: Male, Female, Other, Prefer not to say)
First Name
Last Name
Email (unique)
Password (minimum 8 characters, hashed using bcrypt)


Store user data in SQLite.
Validate input on both frontend and backend (e.g., check for unique nickname/email, password length).


Login:
Users can log in using either their nickname or email combined with their password.
Implement session management using cookies to track logged-in users.
Redirect unauthenticated users to the login/register page.


Logout:
Provide a logout option on all pages, clearing the session and redirecting to the login page.


Access Control:
Only authenticated users can access the forum's main features (posts, comments, messages). Unauthenticated users see only the login/register page.



2. Posts and Comments

Create Posts:
Authenticated users can create posts with a title, content, and a category (General Discussion, Technology, Random, Help & Support).
Store posts in SQLite with references to the user and category.


Comment on Posts:
Users can comment on posts. Comments are visible only when viewing a specific post.
Store comments in SQLite with references to the post and user.


Feed Display:
Display posts in a feed, showing title, author, and category.
Clicking a post shows its content and comments.
Implement pagination or lazy loading for posts if needed.



3. Private Messages

Online/Offline Users Section:
Display a list of users, indicating online/offline status (updated in real time via WebSockets).
Sort users by the timestamp of the last message exchanged (newest first). For users with no messages, sort alphabetically by nickname.
This section must be visible on all pages.


Message History:
Clicking a user loads the last 10 messages exchanged with them.
Implement infinite scroll to load 10 more messages when scrolling up, using throttling or debouncing to prevent excessive requests.
Store messages in SQLite with sender, recipient, content, and timestamp.


Message Format:
Each message must display:
The sender's nickname.
The timestamp of when the message was sent.




Real-Time Messaging:
Use WebSockets to send and receive private messages in real time.
Notify the recipient instantly when a new message is sent, updating their message list without refreshing.



4. Real-Time Features

Use WebSockets (Gorilla WebSocket for backend, native JavaScript WebSocket API for frontend) to enable:
Real-time updates for online/offline user status.
Instant delivery of private messages.
Notifications for new messages without page refresh.


Implement Go routines and channels to handle concurrent WebSocket connections efficiently.

Provided HTML Structure

Use the provided index.html as the single HTML file.
The HTML includes sections for:
Header with login/register/logout links.
Categories list (General Discussion, Technology, Random, Help & Support).
Login form.
Registration form.
Edit profile form.
Post feed with create post and comment functionality.
Private messages section with online users and message history.
Home page with a welcome message and category overview.


Dynamically show/hide sections using JavaScript based on the user's navigation (e.g., show login form for unauthenticated users, show post feed for authenticated users).

Additional Guidelines

Database Schema:
Design a SQLite schema to store:
Users (ID, nickname, email, password hash, first name, last name, age, gender, avatar color, online status).
Posts (ID, user ID, title, content, category, timestamp).
Comments (ID, post ID, user ID, content, timestamp).
Messages (ID, sender ID, recipient ID, content, timestamp).




Security:
Hash passwords using bcrypt.
Sanitize all user inputs to prevent SQL injection and XSS attacks.
Use HTTPS for WebSocket connections (wss://) in production.


Performance:
Optimize database queries for fast retrieval of posts, comments, and messages.
Use throttling or debouncing for scroll events in the message history.


Styling:
Create a clean, responsive CSS design that enhances the provided HTML structure.
Ensure the online users section is always visible (e.g., as a sidebar).


Error Handling:
Provide clear error messages for invalid inputs (e.g., duplicate nickname, incorrect password).
Handle WebSocket disconnections gracefully.


File Structure:
Organize the project as:
main.go: Backend entry point for HTTP and WebSocket servers.
index.html: Single HTML file (use provided structure).
styles.css: CSS for styling.
script.js: JavaScript for frontend logic and WebSocket handling.
forum.db: SQLite database file.





Deliverables
Generate the complete codebase for the Real Time Forum, including:

Backend (main.go):

Set up an HTTP server for handling registration, login, logout, posts, and comments.
Implement a WebSocket server using Gorilla WebSocket for real-time messaging and online status.
Use SQLite for data storage with appropriate schema and queries.
Implement session management with cookies.
Use Go routines and channels for concurrent WebSocket handling.


Frontend (script.js):

Handle all DOM manipulations to create an SPA.
Implement WebSocket client logic for real-time messaging and online status updates.
Manage page transitions (e.g., login to post feed) by showing/hiding HTML sections.
Implement infinite scroll for message history with throttling/debouncing.
Handle form submissions via fetch API for registration, login, posts, and comments.


Styling (styles.css):

Style the application to be responsive and user-friendly.
Ensure the online users section is always visible (e.g., fixed sidebar).
Style forms, posts, and messages for clarity and aesthetics.


Database (forum.db):

Provide the SQLite schema creation script (can be included in main.go).
Ensure all data (users, posts, comments, messages) is stored and retrieved efficiently.



Constraints

Do not use any frontend libraries or frameworks (e.g., React, Angular, Vue).
Use only the allowed Go packages.
Ensure the application works as a single-page application with one HTML file.
Implement real-time features using WebSockets without relying on external services.
Avoid features not specified (e.g., live video or screen sharing).

Expected Artifacts
Generate the following files, each wrapped in an <xaiArtifact> tag with a unique UUID for artifact_id:

main.go (contentType: text/go):
Complete backend implementation with HTTP and WebSocket servers.


index.html (contentType: text/html):
The provided HTML, potentially with minor adjustments for SPA functionality.


script.js (contentType: text/javascript):
Frontend logic for SPA navigation, WebSocket handling, and DOM manipulation.


styles.css (contentType: text/css):
Styling for the entire application.


schema.sql (contentType: text/sql):
SQLite schema for users, posts, comments, and messages.



Notes

Reuse concepts from the previous forum project where applicable, but create a new, improved implementation.
Ensure all features are tested for functionality and real-time performance.
Follow best practices for security, performance, and code organization.
Use the provided HTML structure as the foundation, adapting it as needed for dynamic rendering.

This prompt provides all necessary details to complete the Real Time Forum project. Generate the code and ensure it meets all specified requirements.